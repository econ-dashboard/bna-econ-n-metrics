?dir.create
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
# This path is a partial path and "<two-digit year>.xlsx" need to be appended to
# properly make the call to the source.
lau_data_url_in <- "https://www.bls.gov/lau/laucnty"
# Creates a list of two-digit years for which data is available.
available_years <-
seq(1990, 2020, 1) %>%
as.character() %>%
str_sub(start = -2, end = -1)
data_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_lau <-
openxlsx::read.xlsx(
str_c(lau_data_url_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_lau)
}
data_lau %>% pull(fips_codes)
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
data_lau %>% pull(fips_codes)
ata_lau %>% pull(fips)
data_lau %>% pull(fips)
data_lau %>% pull(fips) %>% distinct_()
data_lau %>% pull(fips) %>% distinct()
?distinct
data_lau %>% distinct(fips)
data_lau %>% distinct(fips) %>% pull(fips)
View(data_lau)
knitr::opts_chunk$set(echo = TRUE)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty20.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:5
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:3
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
data_lau %>% distinct(fips)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty19.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty18.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty17.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty16.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
data_lau %>% count(fips)
data_lau %>% count(fips) %>% arrange()
data_lau %>% count(fips) %>% arrange(descending = T)
data_lau %>% count(fips) %>% arrange(descending = F)
?arrange
data_lau %>% count(fips, sort = F)
data_lau %>% count(fips, sort = T)
data_lau %>% count(fips) %>% arrange(desc(n))
data_lau %>% count(fips) %>% View()
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)")
)
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state - str_extract(area, "(?<=,\s).*")
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\s).*")
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*")
)
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*"),
fips_code = str_c(state_fips, cty_fips),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" ", "-"),
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
)
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
?read_csv
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
data_lau %>% distinct(fips)
# Pulls the available FIPS/counties that we have and uses them to filter data
# throughout the pipeline.
available_fips <- cty_fips_mappings %>% pull(fips_code)
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
available_fips
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips)) %>%
filter(fips %in% available_fips)
data_lau
knitr::opts_chunk$set(echo = TRUE)
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
# This path is a partial path and "<two-digit year>.xlsx" need to be appended to
# properly make the call to the source.
lau_data_url_in <- "https://www.bls.gov/lau/laucnty"
# Creates a list of two-digit years for which data is available.
available_years <-
seq(1990, 2020, 1) %>%
as.character() %>%
str_sub(start = -2, end = -1)
data_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_lau <-
openxlsx::read.xlsx(
str_c(lau_data_url_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_lau)
}
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
lau_data_path_out <- "site/county-data/counties/"
lau_data_path_out <- "../../site/county-data/counties/"
for (fip in c("01001", "01003")) {
data_lau %>%
filter(fips = fip) %>%
write_csv(str_c(lau_data_path_out, fip, "/lau_data_", fip, ".csv"))
}
data_lau %>%
filter(fips == fip) %>%
write_csv(str_c(lau_data_path_out, fip, "/lau_data_", fip, ".csv"))
riteLines("Generating HTML files for each available county.../n")
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty16.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*"),
fips_code = str_c(state_fips, cty_fips),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" ", "-"),
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
)
state_fips_mappings <-
data_raw_fips_mappings %>%
filter(`Summary Level` == "040") %>%
select(
state_fips = `State Code (FIPS)`,
state = `Area Name (including legal/statistical area description)`
)
data_raw_fips_mappings
if (!exists("running_pipeline")) source("lib/load_r_libraries.R")
if (!exists("running_pipeline")) source("lib/load_r_libraries.R")
# for (fips_code in available_fips) {
# 	dir.create(str_c("site/county-data/counties/", fips_code), showWarnings = F)
# }
# Selects data columns relevant to Javascript search function.
cty_fips_mappings_json <-
cty_fips_mappings %>%
select(area, county_page_url)
if (!exists("running_pipeline")) source("../lib/load_r_libraries.R")
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
# Start timer
tic("FIPS data scrape")
writeLines("")
writeLines("Pulling county-FIPS code mappings data...")
# Saves the data source URL and output location to variables.
cty_fips_url_in <- "https://www.bls.gov/lau/laucnty16.xlsx"
cty_fips_path_out <- "data/processed/reference_data/county_fips_mappings.csv"
cty_fips_mappings <-
# Reads in the source XLSX (Excel) file from the URL, skipping the first 7
# lines since they are simply descriptive info. Also only takes in the relevant
# columns needed for this script.
read.xlsx(
cty_fips_url_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
# Extracts the county name and state abbreviation from the area.
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*"),
# Constructs the 5 digit county-specific FIPS codes.
fips_code = str_c(state_fips, cty_fips),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
# Constructs the file path/URL for each area.
# TO-DO: May consider making this URL just the unique FIPS code.
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
)
# Writes the processed data to a CSV file in the `data/processed/reference_data`
# folder.
# cty_fips_mappings %>% write_csv(cty_fips_path_out)
# Pulls the available FIPS/counties that we have and uses them to filter data
# throughout the pipeline.
available_fips <- cty_fips_mappings %>% pull(fips_code)
writeLines(paste0("Creating unique data folders for ", length(available_fips), " available counties within site/county-data/counties/..."))
# for (fips_code in available_fips) {
# 	dir.create(str_c("site/county-data/counties/", fips_code), showWarnings = F)
# }
cty_fips_mappings
cty_fips_mappings %>%
select(state, area, county_page_url)
# Selects data columns relevant to Javascript search function.
cty_fips_mappings_json <-
cty_fips_mappings %>%
select(state, area, county_page_url)
cty_fips_mappings_json %>%
toJSON()
cty_fips_mappings_json %>%
group_by(state) %>%
nest()
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
toJSON()
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
toJSON() %>%
prettify()
cty_fips_mappings_json %>%
group_by(state) %>%
nest()
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
toJSON(pretty = T)
cty_fips_mappings <-
# Reads in the source XLSX (Excel) file from the URL, skipping the first 7
# lines since they are simply descriptive info. Also only takes in the relevant
# columns needed for this script.
read.xlsx(
cty_fips_url_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
# Extracts the county name and state abbreviation from the area.
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*"),
# Constructs the 5 digit county-specific FIPS codes.
fips_code = str_c(state_fips, cty_fips),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
# Constructs the file path/URL for each area.
# TO-DO: May consider making this URL just the unique FIPS code.
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
) %>%
arrange(state, county)
# Selects data columns relevant to Javascript search function.
cty_fips_mappings_json <-
cty_fips_mappings %>%
select(state, area, county_page_url)
cty_fips_mappings_json
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
toJSON(pretty = T)
cty_fips_mappings_json %>%
group_by(state) %>%
nest()
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
pivot_wider()
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
pivot_wider(names_from = state, values_from = data)
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
pivot_wider(names_from = state, values_from = data) %>%
toJSON(pretty = T)
# Transforms relevant columns from R dataframe to JSON list.
json_for_search <-
cty_fips_mappings_json %>%
group_by(state) %>%
nest() %>%
pivot_wider(names_from = state, values_from = data) %>%
toJSON(pretty = T)
# Writes JSON for JS search to relevant file path.
writeLines(
json_for_search,
"../../site/county-data/json/json_for_search.json"
)
