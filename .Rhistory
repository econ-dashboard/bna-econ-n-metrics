num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
?openxlsx::read.xlsx()
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F
)
?rbind
#print(str_c(lau_data_path_in, year, ".xlsx"))
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F
) %>%
rbind(data_row_lau)
#print(str_c(lau_data_path_in, year, ".xlsx"))
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F
) %>%
rbind(data_raw_lau)
?openxlsx::read.xlsx()
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = -1
)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = seq(2:9)
)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = seq(3:9)
)
seq(3:9)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:9
)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:9
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area_name = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:9
)
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area_name = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
)
#print(str_c(lau_data_path_in, year, ".xlsx"))
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area_name = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_raw_lau)
data_raw_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area_name = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
#print(str_c(lau_data_path_in, year, ".xlsx"))
openxlsx::read.xlsx(
str_c(lau_data_path_in, "90", ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area_name = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_raw_lau)
data_raw_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area_name = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_raw_lau <-
openxlsx::read.xlsx(
str_c(lau_data_path_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area_name = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_raw_lau)
}
head(data_raw_lau)
data_raw_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_raw_lau <-
openxlsx::read.xlsx(
str_c(lau_data_path_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_raw_lau)
}
?write_csv()
?dir.create
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
# This path is a partial path and "<two-digit year>.xlsx" need to be appended to
# properly make the call to the source.
lau_data_url_in <- "https://www.bls.gov/lau/laucnty"
# Creates a list of two-digit years for which data is available.
available_years <-
seq(1990, 2020, 1) %>%
as.character() %>%
str_sub(start = -2, end = -1)
data_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_lau <-
openxlsx::read.xlsx(
str_c(lau_data_url_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_lau)
}
data_lau %>% pull(fips_codes)
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
data_lau %>% pull(fips_codes)
ata_lau %>% pull(fips)
data_lau %>% pull(fips)
data_lau %>% pull(fips) %>% distinct_()
data_lau %>% pull(fips) %>% distinct()
?distinct
data_lau %>% distinct(fips)
data_lau %>% distinct(fips) %>% pull(fips)
View(data_lau)
knitr::opts_chunk$set(echo = TRUE)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty20.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:5
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:3
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
data_lau %>% distinct(fips)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty19.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty18.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty17.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
cty_fips_path_in <- "https://www.bls.gov/lau/laucnty16.xlsx"
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
)
data_lau %>% count(fips)
data_lau %>% count(fips) %>% arrange()
data_lau %>% count(fips) %>% arrange(descending = T)
data_lau %>% count(fips) %>% arrange(descending = F)
?arrange
data_lau %>% count(fips, sort = F)
data_lau %>% count(fips, sort = T)
data_lau %>% count(fips) %>% arrange(desc(n))
data_lau %>% count(fips) %>% View()
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)")
)
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state - str_extract(area, "(?<=,\s).*")
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\s).*")
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*")
)
#data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 7,
colNames = F,
cols = 2:4
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3
) %>%
mutate(
county = str_extract(area, ".*(?=,)"),
state = str_extract(area, "(?<=,\\s).*"),
fips_code = str_c(state_fips, cty_fips),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" ", "-"),
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
)
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
?read_csv
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
data_lau %>% distinct(fips)
# Pulls the available FIPS/counties that we have and uses them to filter data
# throughout the pipeline.
available_fips <- cty_fips_mappings %>% pull(fips_code)
source('~/stanford_coding/bna-econ-n-metrics/scripts/data_wrangling/pull_cty_fips_mappings.R', echo=TRUE)
available_fips
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips)) %>%
filter(fips %in% available_fips)
data_lau
knitr::opts_chunk$set(echo = TRUE)
if (!exists("running_pipeline")) source("../../lib/load_r_libraries.R")
# This path is a partial path and "<two-digit year>.xlsx" need to be appended to
# properly make the call to the source.
lau_data_url_in <- "https://www.bls.gov/lau/laucnty"
# Creates a list of two-digit years for which data is available.
available_years <-
seq(1990, 2020, 1) %>%
as.character() %>%
str_sub(start = -2, end = -1)
data_lau <-
tibble(
state_fips = NA_character_,
cty_fips = NA_character_,
area = NA_character_,
year = NA_integer_,
total_labor_force = NA_integer_,
num_employed = NA_integer_,
num_unemployed = NA_integer_,
unemployment_rate = NA_real_
)
for (year in available_years) {
data_lau <-
openxlsx::read.xlsx(
str_c(lau_data_url_in, year, ".xlsx"),
startRow = 7,
colNames = F,
cols = 2:10
) %>%
rename(
state_fips = X1,
cty_fips = X2,
area = X3,
year = X4,
total_labor_force = X5,
num_employed = X6,
num_unemployed = X7,
unemployment_rate = X8
) %>%
rbind(data_lau)
}
data_lau <-
data_lau %>%
mutate(fips = str_c(state_fips, cty_fips))
lau_data_path_out <- "site/county-data/counties/"
lau_data_path_out <- "../../site/county-data/counties/"
for (fip in c("01001", "01003")) {
data_lau %>%
filter(fips = fip) %>%
write_csv(str_c(lau_data_path_out, fip, "/lau_data_", fip, ".csv"))
}
data_lau %>%
filter(fips == fip) %>%
write_csv(str_c(lau_data_path_out, fip, "/lau_data_", fip, ".csv"))
riteLines("Generating HTML files for each available county.../n")
