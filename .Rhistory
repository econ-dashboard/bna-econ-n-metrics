area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" ", "-"),
county_page_url =
paste0("/site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings %>% write_csv(cty_fips_path_out)
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(whisker)) install.packages("whisker")
library(whisker)
template_filepath <- "../scripts/templates/template-detail-page.html"
cty_fips_filepath <- "../data/processed/reference_data/county_fips_mappings.csv"
template <- read_file(template_filepath)
data_county_names <- read_csv(cty_fips_filepath)
data_county_names
str_replace_all("Alameda County", " ", "-") %>% str_to_lower()
for (record in 1:nrow(data_county_names)) {
template_data <-
list(
county_name = data_county_names[record, "county"]
)
writeLines(
whisker.render(template, template_data),
paste0("../site/county-pages/", data_county_names[record, "area_formatted"], ".html")
)
}
View(cty_fips_mappings)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |//", "-"),
county_page_url =
paste0("/site/county-pages/", area_formatted, "-", fips_code, ".html")
)
View(cty_fips_mappings)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |////", "-"),
county_page_url =
paste0("/site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("/site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("../site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings %>% write_csv(cty_fips_path_out)
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(whisker)) install.packages("whisker")
library(whisker)
template_filepath <- "../scripts/templates/template-detail-page.html"
cty_fips_filepath <- "../data/processed/reference_data/county_fips_mappings.csv"
template <- read_file(template_filepath)
data_county_names <- read_csv(cty_fips_filepath)
data_county_names
str_replace_all("Alameda County", " ", "-") %>% str_to_lower()
for (record in 1:nrow(data_county_names)) {
template_data <-
list(
county_name = data_county_names[record, "county"]
)
writeLines(
whisker.render(template, template_data),
data_county_names[record, "county_page_url"]
)
}
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
cty_fips_path_in <- "../../data/raw/reference_data/all-geocodes-v2019.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
data_raw_fips_mappings <- readxl::read_xlsx(cty_fips_path_in, skip = 4)
state_fips_mappings <-
data_raw_fips_mappings %>%
filter(`Summary Level` == "040") %>%
select(
state_fips = `State Code (FIPS)`,
state = `Area Name (including legal/statistical area description)`
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("../site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings %>% write_csv(cty_fips_path_out)
cty_fips_mappings
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(whisker)) install.packages("whisker")
library(whisker)
template_filepath <- "../scripts/templates/template-detail-page.html"
cty_fips_filepath <- "../data/processed/reference_data/county_fips_mappings.csv"
template <- read_file(template_filepath)
data_county_names <- read_csv(cty_fips_filepath)
data_county_names
for (record in 1:nrow(data_county_names)) {
template_data <-
list(
county_name = data_county_names[record, "county"]
)
writeLines(
whisker.render(template, template_data),
data_county_names[record, "county_page_url"] %>% pull()
)
}
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
if (!require(whisker)) install.packages("whisker")
library(whisker)
template_filepath <- "../scripts/templates/template-detail-page.html"
cty_fips_filepath <- "../data/processed/reference_data/county_fips_mappings.csv"
template <- read_file(template_filepath)
data_county_names <- read_csv(cty_fips_filepath)
data_county_names
for (record in 1:nrow(data_county_names)) {
template_data <-
list(
county_name = data_county_names[record, "county"],
state = data_county_names[record, "state"]
)
writeLines(
whisker.render(template, template_data),
data_county_names[record, "county_page_url"] %>% pull()
)
}
readxl::read_excel("https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx", skip=4)
openxlsx::read.xlsx("https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx", startRow = 4)
readxl::read_xlsx(cty_fips_path_in, skip = 4)
?openxlsx::read.xlsx()
openxlsx::read.xlsx("https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx", startRow = 4, sep.names= " ")
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
cty_fips_path_in <- "https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 4,
sep.names= " "
)
state_fips_mappings <-
data_raw_fips_mappings %>%
filter(`Summary Level` == "040") %>%
select(
state_fips = `State Code (FIPS)`,
state = `Area Name (including legal/statistical area description)`
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("../site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings %>% write_csv(cty_fips_path_out)
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
cty_fips_path_in <- "https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 4,
sep.names= " "
)
state_fips_mappings <-
data_raw_fips_mappings %>%
filter(`Summary Level` == "040") %>%
select(
state_fips = `State Code (FIPS)`,
state = `Area Name (including legal/statistical area description)`
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("site/county-pages/", area_formatted, "-", fips_code, ".html")
)
cty_fips_mappings %>% write_csv(cty_fips_path_out)
install.packages("pacman")
?library
source('~/stanford_coding/bna-econ-n-metrics/lib/load_r_libraries.R', echo=TRUE)
source('~/stanford_coding/bna-econ-n-metrics/lib/load_r_libraries.R', echo=TRUE)
source('~/stanford_coding/bna-econ-n-metrics/lib/load_r_libraries.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
cty_fips_path_in <- "https://www2.census.gov/programs-surveys/popest/geographies/2019/all-geocodes-v2019.xlsx"
cty_fips_path_out <- "../../data/processed/reference_data/county_fips_mappings.csv"
data_raw_fips_mappings <-
openxlsx::read.xlsx(
cty_fips_path_in,
startRow = 4,
sep.names= " "
)
state_fips_mappings <-
data_raw_fips_mappings %>%
filter(`Summary Level` == "040") %>%
select(
state_fips = `State Code (FIPS)`,
state = `Area Name (including legal/statistical area description)`
)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("site/county-pages/", area_formatted, "-", fips_code, ".html")
) %>%
sort(fips_code)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("site/county-pages/", area_formatted, "-", fips_code, ".html")
) %>%
arrange("fips_code")
?toJson
?rjson::toJSON
rjson::toJSON(unname(split(head(cty_fips_mappings), 1:nrow(cty_fips_mappings))))
cat(rjson::toJSON(unname(split(head(cty_fips_mappings), 1:nrow(cty_fips_mappings)))))
cat(rjson::toJSON(unname(split(head(cty_fips_mappings), 1:nrow(head(cty_fips_mappings))))))
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_filepath =
paste0("site/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html")
) %>%
arrange("fips_code")
cty_fips_mappings %>%
select(area, county_page_url)
cat(rjson::toJSON(split(head(cty_fips_mappings), 1:nrow(head(cty_fips_mappings)))))
cty_fips_mappings %>%
select(area, county_page_url) %>%
rjson::toJSON(unname(split(., 1:nrow(.))))
cty_fips_mappings %>%
select(area, county_page_url) %>%
rjson::toJSON(unname(split(., 1:nrow(cty_fips_mappings))))
cty_fips_mappings %>%
select(area, county_page_url) %>%
cat(rjson::toJSON(unname(split(., 1:nrow(cty_fips_mappings)))))
cty_fips_mappings %>%
select(area, county_page_url) %>%
rjson::toJSON(unname(split(., 1:nrow(cty_fips_mappings))))
cty_fips_mappings %>%
select(area, county_page_url)
cty_fips_mappings <-
data_raw_fips_mappings %>%
filter(
str_detect(
`Area Name (including legal/statistical area description)`,
"County$|Borough$|Parish$"
)
) %>%
rename(state_fips = `State Code (FIPS)`) %>%
left_join(state_fips_mappings, by = "state_fips") %>%
transmute(
fips_code = str_c(state_fips, `County Code (FIPS)`),
county = `Area Name (including legal/statistical area description)`,
state,
area = str_c(county, ", ", state),
area_formatted =
area %>%
str_remove_all(",") %>%
str_to_lower() %>%
str_replace_all(" |/", "-"),
county_page_url =
paste0("/county-pages/", area_formatted, "-", fips_code, ".html"),
county_page_filepath =
paste0("site", county_page_url)
) %>%
arrange("fips_code")
cty_fips_mappings
temp <- cty_fips_mappings %>%
select(area, county_page_url)
cat(rjson::toJSON(unname(split(temp, 1:nrow(temp)))))
cty_fips_mappings %>%
select(area, county_page_url) %>%
cat(rjson::toJSON(unname(split(., 1:nrow(.)))))
cty_fips_mappings_json <-
cty_fips_mappings %>%
select(area, county_page_url)
json_for_search <-
cat(
rjson::toJSON(
unname(
split(cty_fips_mappings_json, 1:nrow(cty_fips_mappings_json))
)
)
)
json_for_search <-
rjson::toJSON(
unname(
split(cty_fips_mappings_json, 1:nrow(cty_fips_mappings_json))
)
)
json_for_search
writeLines(
cat(json_for_search),
"../../site/static/js/"
)
writeLines(
json_for_search,
"../../site/static/js/"
)
writeLines(
json_for_search,
"../../site/static/js/json_for_search.json"
)
writeLines(
json_for_search,
"../../site/county-data/json/json_for_search.json"
)
print(
"County-FIPS code mappings pulled and processed.
County data is stored in data/processed/reference_data/.
JSON data for JS search function is stored at site/county-data/json/json_for_search.json."
)
print(
"County-FIPS code mappings pulled and processed. County data is stored in data/processed/reference_data/. JSON data for JS search function is stored at site/county-data/json/json_for_search.json."
)
print("County-FIPS code mappings pulled and processed.")
print("County data is stored in data/processed/reference_data/.")
print("JSON data for JS search function is stored at site/county-data/json/json_for_search.json.")
library(whisker)
remove.packages("whisker")
